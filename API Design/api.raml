#%RAML 1.0
---
title: Respon_sum API
baseUri: localhost/{version}
version: v1

# Authentication omitted

types:
  studentRetrieve: !include student-retrieve.json
  studentModify: !include student-modify.json
  instructorRetrieve: !include instructor-retrieve.json
  instructorModify: !include instructor-modify.json
  classRetrieve: !include class-retrieve.json
  classModify: !include class-modify.json
  questionRetrieve: !include question-retrieve.json
  questionModify: !include question-modify.json
  responseRetrieve: !include response-retrieve.json
  responseModify: !include response-modify.json
  stats: !include stats.json

traits:
  searchable:
    queryParameters:
      query:
        description: Query to search for. <<description>>
        type: string
        required: false
  orderable:
    queryParameters:
      orderBy:
        description: Order by field: <<fields>>.
        enum: <<fields>>
        default: <<default>>
        required: false
      order:
        description: Order
        enum: [desc, asc]
        default: desc
        required: false
  pageable:
    queryParameters:
      offset:
        description: Skip over a number of elements by specifying an offset value for the query.
        type: integer
        required: false
        example: 20
        default: 0
      limit:
        description: Limit the number of elements on the response.
        type: integer
        required: false
        example: 80
        default: 10

/students:
  description: Collection of all registered students.
  post:
    description: Create a new student.
    body:
      application/json:
        type: studentModify
    responses:
      200:
        body:
          application/json:
            type: |
              {
                "$type": "object",
                "$schema": "http://json-schema.org/draft-07/schema",
                "id": "http://jsonschema.net",
                "properties": {
                  "id": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
  /{studentId}: # an ID from the database 
    get:
      description: Get information about a student.
      responses:
        200:
          body:
            application/json:
              type: studentRetrieve
    put:
      description: Update a student's information.
      body:
        application/json:
          type: studentModify
    delete:
      description: Delete a student account.
    /responses:
      description: A list of all the responses the student has ever made.
      get:
        description: |
          Get the paginated list of responses made by the student.
          If ordering by "correct" or "wrong", responses matching the criteria
          will be placed at the top. Then, they will be sorted by type of response in one batch.
          Within each batch, they will be sorted by recency.
        is:
          - pageable
          - orderable: {fields: ["recency", "correct", "wrong"], default: "recency"}
        body:
          application/json:
            type: |
              {
                "type": "array",
                "$schema": "http://json-schema.org/draft-07/schema",
                "id": "http://jsonschema.net",
                "items": {
                  "$ref": "response-retrieve.json"
                }
              }
    /current-classes:
      description: A list of active classes in which the student is currently registered.
      get:
        description: |
          Get the paginated list of classes in which the student is currently registered.
          The classes are sorted descending by date joined.
        is:
          - pageable
        body:
          application/json:
            type: |
              {
                "type": "array",
                "$schema": "http://json-schema.org/draft-07/schema",
                "id": "http://jsonschema.net",
                "items": {
                  "$ref": "class-retrieve.json"
                }
              }
    /past-classes:
      description: A list of inactive classes in which the student was previously registered.
      # TODO: searching through past classes? Maybe after three terms.
      get:
        description: |
          Get the paginated list of classes in which the student was previously registered.
          The classes are sorted descending by date joined.
        is:
          - pageable
        body:
          application/json:
            type: |
              {
                "type": "array",
                "$schema": "http://json-schema.org/draft-07/schema",
                "id": "http://jsonschema.net",
                "items": {
                  "$ref": "class-retrieve.json"
                }
              }
/instructors:
  description: Collection of all registered instructors.
  post:
    description: Create a new instructor.
    body:
      application/json:
        type: instructorModify
    responses:
      200:
        body:
          application/json:
            type: |
              {
                "$type": "object",
                "$schema": "http://json-schema.org/draft-07/schema",
                "id": "http://jsonschema.net",
                "properties": {
                  "id": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
  /{instructorId}:
    get:
      description: Get information about an instructor.
      responses:
        200:
          application/json:
            type: instructorRetrieve
    put:
      description: Update an instructor's information.
      body:
        application/json:
          type: instructorModify
    delete:
      description: Delete an instructor account.
    /questions:
      description: A list of all questions the instructor has ever asked.
      get:
        description: |
          Get the paginated and searchable list of questions asked by the instructor.
        is:
          - pageable
          - orderable: {fields: ["recency", "correctPercent", "incorrectPercent", "unrespondedPercent"]}
          - searchable: {description: "Searches in question and correct answer texts."}
        responses:
          200:
            application/json:
              type: |
                {
                "type": "array",
                "$schema": "http://json-schema.org/draft-07/schema",
                "id": "http://jsonschema.net",
                "items": {
                  "$ref": "question-retrieve.json"
                }
              }
    /current-classes:
      description: A list of all active classes currently owned by the instructor.
      get:
        description: |
          Get the paginated list of classes currently active.
          The classes are sorted descending by date joined.
        is:
          - pageable
        body:
          application/json:
            type: |
              {
                "type": "array",
                "$schema": "http://json-schema.org/draft-07/schema",
                "id": "http://jsonschema.net",
                "items": {
                  "$ref": "class-retrieve.json"
                }
              }
    /past-classes:
      description: A list of all inactive classes previously owned by the instructor.
      # TODO: searching through past classes? Maybe after three terms.
      get:
        description: |
          Get the paginated list of classes previously owned by the instructor.
          The classes are sorted descending by date joined.
        is:
          - pageable
        body:
          application/json:
            type: |
              {
                "type": "array",
                "$schema": "http://json-schema.org/draft-07/schema",
                "id": "http://jsonschema.net",
                "items": {
                  "$ref": "class-retrieve.json"
                }
              }

/classes:
  description: Collection of all classes, active and inactive.
  get:
    description: Get the pageable and searchable list of all classes, ordered by date.
    is:
      - pageable
    queryParameters:
      active:
        description: |
          Specifies whether to filter active classes. If true, filter for active classes;
          if false, filter for inactive classes; if not specified, do not filter.
        displayName: Active
        type: boolean
        required: false
      institution:
        description: |
          Institution for which to filter results. Must match, suggested. Drop down, can type for auto.
        displayName: Institution
        type: string
        required: false
      searchText:
        description: |
          Text to search for in class data. Matches class names.
        displayName: Search text
        type: string
        required: false
    responses:
      200:
        application/json:
          type: |
            {
              "type": "array",
              "$schema": "http://json-schema.org/draft-07/schema",
              "id": "http://jsonschema.net",
              "items": {
                "$ref": "class-retrieve.json"
              }
            }
  post:
    description: Create a new class.
    body:
      application/json:
        type: classModify
    responses:
      200:
        body:
          application/json:
            type: |
              {
                "$type": "object",
                "$schema": "http://json-schema.org/draft-07/schema",
                "id": "http://jsonschema.net",
                "properties": {
                  "id": {
                    "type": "string"
                  }
                },
                "additionalProperties": false
              }
  /{classId}:
    get:
      description: Get information about a class.
      responses:
        200:
          application/json:
            type: classRetrieve
    put:
      description: Update a class's information.
      body:
        application/json:
          type: classModify
    delete:
      description: Delete a class.
    /active:
      get:
        description: Get whether the class is currently active.
        responses:
          200:
            application/json:
              type: |
                {
                  "type": "object",
                  "$schema": "http://json-schema.org/draft-07/schema",
                  "id": "http://jsonschema.net",
                  "properties": {
                    "active": {
                      "type": "boolean"
                    }
                  },
                  "required": ["active"],
                  "additionalProperties": false
                }
      put:
        description: |
          Set a class as active or inactive. Setting as inactive will move the class
          to "past classes" in all lists of current and past classes, and will disable
          creating questions or responses. Setting as active will set it back.
        body:
          application/json:
            type: |
              {
                "type": "object",
                "$schema": "http://json-schema.org/draft-07/schema",
                "id": "http://jsonschema.net",
                "properties": {
                  "active": {
                    "type": "boolean"
                  }
                },
                "required": ["active"],
                "additionalProperties": false
              }
    /instructors:
      get:
        description: Get all instructors for a class, ordered alphabetically.
        responses:
          200:
            application/json:
              type: |
                {
                  "type": "array",
                  "$schema": "http://json-schema.org/draft-07/schema",
                  "id": "http://jsonschema.net",
                  "items": {
                    "$ref": "instructor-retrieve.json"
                  }
                }
      /{instructorId}:
        put:
          description: Add a new instructor to this class.
        delete:
          description: |
            Remove an instructor from the class. Will respond with 403 Forbidden if this is the
            last remaining instructor.
    /students:
      get:
        description: Get a pageable list of all students in the class, ordered alphabetically by name.
        is:
          - pageable
        responses:
          200:
            application/json:
              type: |
                {
                  "type": "array",
                  "$schema": "http://json-schema.org/draft-07/schema",
                  "id": "http://jsonschema.net",
                  "items": {
                    "$ref": "student-retrieve.json"
                  }
                }
      /{studentId}:
        put:
          description: Add a student to the class.
        delete:
          description: Delete a student from a class
        /performance:
          get:
            description: Get a student's performance in the class.
            responses:
              200:
                application/json:
                  type: stats
    /responses:
      description: A list of all responses to questions in the class.
      get:
        description: Get all the responses for a class
        is:
          - pageable
          - orderable: {fields: ["recency", "correct", "incorrect"], default: "recency"}
          - searchable: {description: "Searches in question texts, answer texts, and short answer responses."}
        responses:
          200:
            application/json:
              type: |
                {
                  "type": "array",
                  "$schema": "http://json-schema.org/draft-07/schema",
                  "id": "http://jsonschema.net",
                  "items": {
                    "$ref": "response-retrieve.json"
                  }
                }
    /questions:
      description: The collection of all questions in the class.
      get:
        description: Get a pageable and searchable list of all questions in the class.
        is:
          - pageable
          - searchable: {description: "Searches in question texts and answer texts."}
        queryParameters: 
          viewableByStudents:
            description: |
              Specifies whether to filter for questions viewable by students. Controlled by instructor
              after asking question. If true, filter for questions marked viewable by students; if false,
              filter for questions not marked viewable by students; if not present, don't filter at all.
              (In future) - will return an error if viewableByStudents is not present or false and this
              request is done by a student account.
            type: boolean
            required: false
        responses:
          200:
            application/json:
              type: |
                {
                  "type": "array",
                  "$schema": "http://json-schema.org/draft-07/schema",
                  "id": "http://jsonschema.net",
                  "items": {
                    "$ref": "question-retrieve.json"
                  }
                }
      post:
        description: Create a question for a class.
        body:
          application/json:
            type: questionModify
      /{questionId}:
        get:
          description: Get information about a question for a class.
          responses:
            200:
              application/json:
                type: questionRetrieve
        put:
          description: Modify a question's information.
          body:
            application/json:
              type: questionModify
        delete:
        /viewable-by-students:
          get:
            description: Get whether a question is viewable by students.
            responses:
              200:
                application/json:
                  type: |
                    {
                      "type": "object",
                      "$schema": "http://json-schema.org/draft-07/schema",
                      "id": "http://jsonschema.net",
                      "properties": {
                        "viewableByStudents": {
                          "type": "boolean"
                        }
                      },
                      "required": "viewableByStudents",
                      "additionalProperties": false
                    }
          put:
            description: Set whether a question is viewable by students.
            body:
              application/json:
                type: |
                  {
                    "type": "object",
                    "$schema": "http://json-schema.org/draft-07/schema",
                    "id": "http://jsonschema.net",
                    "properties": {
                      "viewableByStudents": {
                        "type": "boolean"
                      }
                    },
                    "required": "viewableByStudents",
                    "additionalProperties": false
                  }
        /responses:
          description: A list of all responses to this question.
          get:
            description: Get the list of all responses to a question.
            is:
              - pageable
              - orderable: {fields: ["recency", "correct", "incorrect"], default: "correct"}
            responses:
              200:
                application/json:
                  type: |
                    {
                      "type": "array",
                      "$schema": "http://json-schema.org/draft-07/schema",
                      "id": "http://jsonschema.net",
                      "items": {
                        "$ref": "response-retrieve.json"
                      }
                    }
          /{studentId}:
            description: The response by a specific student to this question.
            get:
              description: Get the response made by a student to this question.
              responses:
                200:
                  application/json:
                    type: responseRetrieve
                404:
            put:
              description: Create or change a student's response to this question
              body:
                application/json:
                  type: responseModify
            delete:
              description: Delete a student's reponse to this question.
